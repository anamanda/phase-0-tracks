8.3 Release 2: Execute SQL Queries


/// 1) Display the information in one table (either table is fine). ///
sqlite> SELECT * FROM bands;
1|Blonde Maze|1|false|@blondemaze|2
2|Labyrinth Ear|2|false|@LabyrinthEar|2
3|Third Eye Blind|5|false|@ThirdEyeBlind|1
4|Calvin Harris|1|true|@CalvinHarris|4
5|Jack Johnson|1|false|@jackjohnson|3
6|Goo Goo Dolls|2|false|@googoodolls|1


/// 2) Update an item that meets some condition (you can choose a condition that makes sense). ///
sqlite> UPDATE bands SET genre_id=3 WHERE name="Goo Goo Dolls";


/// 3) Display the information in both tables using one query. ///

sqlite> SELECT * FROM bands, genres WHERE bands.genre_id = genres.id;
1|Blonde Maze|1|false|@blondemaze|2|2|Electronic
2|Labyrinth Ear|2|false|@LabyrinthEar|2|2|Electronic
3|Third Eye Blind|5|false|@ThirdEyeBlind|1|1|Rock
4|Calvin Harris|1|true|@CalvinHarris|4|4|Dance
5|Jack Johnson|1|false|@jackjohnson|3|3|Acoustic
6|Goo Goo Dolls|2|false|@googoodolls|3|3|Acoustic


/// 4) Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query. ///
sqlite> SELECT bands.name, genres.genre FROM bands JOIN genres ON bands.genre_id = genres.id;
Blonde Maze|Electronic
Labyrinth Ear|Electronic
Third Eye Blind|Rock
Calvin Harris|Dance
Jack Johnson|Acoustic
Goo Goo Dolls|Acoustic


/// 5) Delete an item that meets some condition (you can choose a condition that makes sense). ///
sqlite> DELETE FROM bands WHERE twitter_handle="@jackjohnson";


/// JOINS ///

***Cross Inner Join***
Combines all records from one table with all records from another.

sqlite> SELECT bands.id, name, genre_id FROM bands CROSS JOIN genres;
1|Blonde Maze|2
1|Blonde Maze|2
1|Blonde Maze|2
1|Blonde Maze|2
2|Labyrinth Ear|2
2|Labyrinth Ear|2
2|Labyrinth Ear|2
2|Labyrinth Ear|2
3|Third Eye Blind|1
3|Third Eye Blind|1
3|Third Eye Blind|1
3|Third Eye Blind|1
4|Calvin Harris|4
4|Calvin Harris|4
4|Calvin Harris|4
4|Calvin Harris|4
6|Goo Goo Dolls|3
6|Goo Goo Dolls|3
6|Goo Goo Dolls|3
6|Goo Goo Dolls|3


***Inner Join***
This is the most common type of join. It selects all rows from both tables and joins where they share values in common.
This was used in question number 4.


***Left Join***
This joins all of the rows from the left table with all of the rows from the right table, but only displays information in the right table where there is matching information in the left table. If there is no matching information in a row, the right table will display NULL in that row.

sqlite> SELECT bands.name, genres.genre FROM bands LEFT JOIN genres ON bands.genre_id=genres.id;
Blonde Maze|Electronic
Labyrinth Ear|Electronic
Third Eye Blind|Rock
Calvin Harris|Dance
Goo Goo Dolls|Acoustic


***Right Join***
This has the opposite effect of the left join, joining all of the rows from the right table with all of the rows the left table, but only displays information in the left table where there is matching information in the right table. If there is no matching information in a row, the left table will display NULL in that row.

This doesn't seem to be currently supported:

sqlite> SELECT bands.name, genres.genre FROM bands RIGHT JOIN genres ON bands.genre_id=genres.id;
Error: RIGHT and FULL OUTER JOINs are not currently supported





